import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{Distance}from"/static/engine/code_tools/misc/Distance.js";import{Velocity}from"/static/engine/objects/Velocity.js";import{Position}from"/static/engine/position/Position.js";import{Crate}from"/static/game/extensions/fetch_container/Crate.js";export class FetchContainerExtension{constructor(t){AssertNotNull(t,"argument spaceship in "+this.constructor.name+".js should not be null"),this.spaceship=t,this.container=new Crate({x:100,y:200}),this.connectedToSpaceship=!1,this.ropeLength=400,this.deliverySpot=new Position(15e3,200),this.delivered=!1}update(){this.connectedToSpaceship?this.container.followIfOutsideOfRadius(this.spaceship,this.ropeLength):Distance.withinRadius(this.container,this.spaceship,this.ropeLength)&&!this.delivered&&(this.connectedToSpaceship=!0),!this.delivered&&Distance.withinRadius(this.container.position.center,this.deliverySpot,200)&&(this.delivered=!0,this.connectedToSpaceship=!1,this.container.resetVelocity(),this.spaceship.resetVelocity())}draw(t,e){if(this.container.draw(t,e),this.connectedToSpaceship&&t.lineBetween(this.spaceship.position.center,this.container.position.center),this.delivered?t.hollowCircle(this.deliverySpot,"green",200):t.hollowCircle(this.deliverySpot,"red",200),this.connectedToSpaceship){t.text(this.container,"Bring me to the destination");const e=t.objectThatIsMovingInRectangularPathAroundObject(this.spaceship,this.deliverySpot);t.text(e,Math.round(Distance.between(this.container,this.deliverySpot)))}else if(this.delivered)t.text(this.container,"Good job!");else{const e=this.spaceship.position.copy();e.y-=100,t.text(e,"Enter spaceship"),t.text(this.container,"pick up crate")}}}
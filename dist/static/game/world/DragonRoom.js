import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{a}from"/static/engine/code_tools/a.js";import{Picture}from"/static/engine/code_tools/misc/Picture.js";import{Camera}from"/static/engine/core/camera/Camera.js";import{Dialogue}from"/static/engine/mechanics/dialogue/Dialogue.js";import{MultiTextTyper}from"/static/engine/mechanics/dialogue/MultiTextTyper.js";import{TextTyper}from"/static/engine/mechanics/dialogue/TextTyper.js";import{DynamicGameObject}from"/static/engine/objects/DynamicGameObject.js";import{LocalObjects}from"/static/engine/objects/LocalObjects.js";import{Position}from"/static/engine/position/Position.js";import{D}from"/static/game/world/D.js";import{Npc}from"/static/game/world/Npc.js";export class DragonRoom{constructor(e){AssertNotNull(e,"argument player in "+this.constructor.name+".js should not be null"),this.player=e,this.entrance=new DynamicGameObject(new Position(200,2037,100,100),1,1);const t=new Npc(new Position(1177,1247,140,200));Camera.zoom=1.5,Camera.follow(t),this.localObjects=new LocalObjects([new Picture(new Position(0,0,2e3,2e3),"/static/assets/dragon_room.png"),this.entrance,t,new Dialogue([new MultiTextTyper(t.position.over(),["hei"],()=>{Camera.follow(e)}),new MultiTextTyper(e.position.over(),["hei"])]),D((t,o)=>{const i=new Position(936,1174);e.within(200,i)&&(console.log("hei"),t.text(i.offset(0,-100),"E to pick up"))})])}update(){this.localObjects.update(),this.player.within(500,this.entrance)&&Camera.follow(this.entrance)}draw(e,t){this.localObjects.draw(e,t)}}
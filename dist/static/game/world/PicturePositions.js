import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{a}from"/static/engine/code_tools/a.js";import{Mouse}from"/static/engine/controller/Mouse.js";import{Palette}from"/static/engine/core/Palette.js";import{Position}from"/static/engine/position/Position.js";const scale=4;export class PicturePositions{constructor(t,o){AssertNotNull(t,"argument image in "+this.constructor.name+".js should not be null"),AssertNotNull(o,"argument position in "+this.constructor.name+".js should not be null"),this.image=t,this.position=o,this.regions=[];const i=Palette.fixedOffscreen(4*t.width,4*t.height);i.ctx.imageSmoothingEnabled=!1,i.drawImage(t);const s=new Map,e=i.ctx.getImageData(0,0,i.width,i.height).data;for(let t=0;t<e.length;t+=4){const[o,i,n,r]=[e[t],e[t+1],e[t+2],e[t+3]];if(0===r)continue;const a=`${o},${i},${n}`;s.has(a)||s.set(a,[]),s.get(a).push(t/4)}const n=Array.from({length:i.height},()=>Array(i.width).fill(!1)),r=[[0,1],[1,0],[0,-1],[-1,0],[-1,-1],[-1,1],[1,-1],[1,1]];for(const[e,a]of s){let s=[];for(const t of a){const h=t%i.width,c=Math.floor(t/i.width);if(n[c][h])continue;const l=[[h,c]];let g=h,m=c,u=h,f=c;for(;l.length>0;){const[t,o]=l.shift();if(!n[o][t]){n[o][t]=!0,g=Math.min(g,t),m=Math.min(m,o),u=Math.max(u,t),f=Math.max(f,o);for(const[s,e]of r){const r=t+s,h=o+e;if(r>=0&&r<i.width&&h>=0&&h<i.height){const t=h*i.width+r;!n[h][r]&&a.includes(t)&&l.push([r,h])}}}}const d=Math.round(4*g)+o.x,p=Math.round(4*m)+o.y,w=Math.round(4*(u-g+1)),M=Math.round(4*(f-m+1)),x=new Position(d,p,w,M);x.color=e,s.push(x)}this.regions.push(...s),i.ctx.imageSmoothingEnabled=!1,i.ctx.drawImage(t,0,0,4*t.width,4*t.height)}i.toImageBitmap(t=>{this.ib=t})}update(){}draw(t,o){this.ib&&t.imageBitmap(new Position(-2,-2),this.ib);for(const o of this.regions)Mouse.hovering(o)&&(console.log(o),t.rectangle(o,o.color))}}
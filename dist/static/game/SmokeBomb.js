import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{Key}from"/static/engine/controller/keyboard/Key.js";import{SplashParticles}from"/static/engine/graphics/particles/SplashParticles.js";import{Html}from"/static/engine/graphics/ui/html/Html.js";import{Charge}from"/static/engine/mechanics/Charge.js";import{Text}from"/static/engine/mechanics/dialogue/Text.js";import{LocalObjects}from"/static/engine/objects/LocalObjects.js";import{Registry}from"/static/engine/objects/Registry.js";import{Init}from"/static/game/world/Init.js";export class SmokeBomb{constructor(e){AssertNotNull(e,"argument player in "+this.constructor.name+".js should not be null"),this.player=e,this.localObjects=new LocalObjects([Init(this,{particles:new SplashParticles,charge:new Charge(1,100)})]),this.e=new Key("e");const t=Html.text("");this.charge.onExhaust=()=>Html.changeText(t,"smoke bomb recharging"),this.charge.onReady=()=>Html.changeText(t,"smoke bomb ready"),Html.addToScreen(Html.div("lower-center-ui",[Html.div("shoulder-to-shoulder",[t])]))}update(){if(this.localObjects.update(),this.e.down&&this.charge.ready()&&(this.particles.random(this.player),this.charge.exhaust(),Registry.enemies))for(const e of Registry.enemies)e.within(350,this.player)&&e.markBlinded()}draw(e,t){this.localObjects.draw(e,t),e.hollowCircle(this.player,"red",350)}}
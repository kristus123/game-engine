import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{Once}from"/static/engine/code_tools/Once.js";import{Distance}from"/static/engine/code_tools/misc/Distance.js";import{Random}from"/static/engine/code_tools/misc/Random.js";import{RunOnce}from"/static/engine/code_tools/on/RunOnce.js";import{Call}from"/static/engine/code_tools/tools/Call.js";import{ForcePush}from"/static/engine/core/physics/ForcePush.js";import{Push}from"/static/engine/core/physics/Push.js";import{Inventory}from"/static/engine/mechanics/inventory/Inventory.js";import{DynamicGameObject}from"/static/engine/objects/DynamicGameObject.js";import{Position}from"/static/engine/position/Position.js";import{D}from"/static/game/world/D.js";export class Piss{constructor(t,e){AssertNotNull(t,"argument player in "+this.constructor.name+".js should not be null"),AssertNotNull(e,"argument position in "+this.constructor.name+".js should not be null"),this.player=t,this.position=e,this.inventory=new Inventory;for(let t=0;t<100;t++){const t=Random.integerBetween(e.x,e.x+e.width),n=Random.integerBetween(e.y,e.y+e.height),o=Random.direction(new Position(t,n),100),i=new DynamicGameObject(new Position(o.x,o.y,Random.integerBetween(1,3),Random.integerBetween(1,3)),200,20);this.inventory.addPickable(i)}}update(){RunOnce(this.inventory.size>=1,()=>{Call(this.onFinish)})}draw(t,e){this.inventory.draw(t,e),this.inventory.pickableItems.forEach(t=>{Distance.between(t,this.player.position.center)<50&&this.inventory.pickUp(t),Distance.between(t,this.player)<200&&ForcePush(t).towards(this.player.position.center,10)})}}
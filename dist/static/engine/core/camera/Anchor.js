import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{a}from"/static/engine/code_tools/a.js";import{SmoothPosition}from"/static/engine/code_tools/smooth/SmoothPosition.js";import{Camera}from"/static/engine/core/camera/Camera.js";import{Position}from"/static/engine/position/Position.js";function limitNumber(t,o,i){const s=o??1,n=i??20;return Math.min(Math.max(parseInt(t),s),n)}export class Anchor{constructor(t,o=500,i=1,s=.1){AssertNotNull(t,"argument anchoredPosition in "+this.constructor.name+".js should not be null"),AssertNotNull(o,"argument maxPixelMovement in "+this.constructor.name+".js should not be null"),AssertNotNull(i,"argument multiplier in "+this.constructor.name+".js should not be null"),AssertNotNull(s,"argument smoothness in "+this.constructor.name+".js should not be null"),this.anchoredPosition=t,this.maxPixelMovement=o,this.multiplier=i,this.smoothness=s,this.smoothPosition=new SmoothPosition(t,s,100)}update(){this.smoothPosition.update(this.anchoredPosition);const t=this.smoothPosition.position.x-Camera.position.x;Camera.position.x+=limitNumber(t,-this.maxPixelMovement,this.maxPixelMovement)*this.multiplier;const o=this.smoothPosition.position.y-Camera.position.y;Camera.position.y+=limitNumber(o,-this.maxPixelMovement,this.maxPixelMovement)*this.multiplier}}
import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{Random}from"/static/engine/code_tools/misc/Random.js";import{Position}from"/static/engine/position/Position.js";export class Velocity{constructor(t,s=0,i=0){AssertNotNull(t,"argument object in "+this.constructor.name+".js should not be null"),AssertNotNull(s,"argument _x in "+this.constructor.name+".js should not be null"),AssertNotNull(i,"argument _y in "+this.constructor.name+".js should not be null"),this.object=t,this._x=s,this._y=i,this.position=new Position(0,0)}oppositePosition(){return new Velocity(this.object,-this._x,-this._y)}draw(t,s){t.circle(this.object.x+this._x,this.object.y+this._y,10,"orange")}reset(){this._x=0,this._y=0}random(t=10){this._x+=Random.integerBetween(-t,t),this._y+=Random.integerBetween(-t,t)}rotate(t){const s=t*(Math.PI/180),i=Math.cos(s),o=Math.sin(s),e=this._x*i-this._y*o,n=this._x*o+this._y*i;this._x=e,this._y=n}get x(){return this._x}set x(t){this._x=t,this.position.x=this.object.x+this._x}get y(){return this._y}set y(t){this._y=t,this.position.y=this.object.y+this._y}}
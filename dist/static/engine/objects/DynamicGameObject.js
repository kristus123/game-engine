import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{Collision}from"/static/engine/core/physics/Collision.js";import{Physics}from"/static/engine/core/physics/Physics.js";import{Velocity}from"/static/engine/objects/Velocity.js";import{_GameObject}from"/static/engine/objects/_GameObject.js";export class DynamicGameObject extends _GameObject{constructor(t,i,e){super(t),AssertNotNull(t,"argument position in "+this.constructor.name+".js should not be null"),AssertNotNull(i,"argument weight in "+this.constructor.name+".js should not be null"),AssertNotNull(e,"argument velocityFactor in "+this.constructor.name+".js should not be null"),this.position=t,this.weight=i,this.velocityFactor=e,this.velocity=new Velocity(this,0,0),Physics.global.applyPhysics(this)}resetVelocity(){this.velocity.x=0,this.velocity.y=0}get movingLeft(){return this.velocity.x<-10}get movingRight(){return this.velocity.x>10}get movingUp(){return this.velocity.y<-10}get movingDown(){return this.velocity.y>10}get movingHorizontally(){return this.movingLeft||this.movingRight}get movingVertically(){return this.movingUp||this.movingDown}onCollision(t){}update(){}decreaseVelocity(t=.5){this.velocity.x*=t,this.velocity.y*=t}}

export const Easings = {

	/*────────────────────────────────────────────
 	* LINEAR
 	*
 	* y
 	* 1.0 |                  *
 	* 0.8 |                *
 	* 0.6 |              *
 	* 0.4 |            *
 	* 0.2 |          *
 	* 0.0 +----------------------------- x
 	*
 	* A straight, constant-rate progression.
 	*────────────────────────────────────────────*/
	linear: t => t,


	/*────────────────────────────────────────────
 	* EASE IN QUAD
 	*
 	* y
 	* 1.0 |                  *
 	* 0.8 |               *
 	* 0.6 |            *
 	* 0.4 |         *
 	* 0.2 |     *
 	* 0.0 +----------------------------- x
 	*
 	* Starts slow, accelerates toward the end.
 	*────────────────────────────────────────────*/
	easeInQuad: t => t * t,


	/*────────────────────────────────────────────
 	* EASE OUT QUAD
 	*
 	* y
 	* 1.0 | *
 	* 0.8 |   *
 	* 0.6 |     *
 	* 0.4 |        *
 	* 0.2 |           *
 	* 0.0 +----------------------------- x
 	*
 	* Starts fast, slows down toward the end.
 	*────────────────────────────────────────────*/
	easeOutQuad: t => t * (2 - t),


	/*────────────────────────────────────────────
 	* EASE IN OUT QUAD
 	*
 	* y
 	* 1.0 | *               *
 	* 0.8 |   *           *
 	* 0.6 |     *       *
 	* 0.4 |       *   *
 	* 0.2 |         *
 	* 0.0 +----------------------------- x
 	*
 	* Slow start, speeds up, then slows down again.
 	*────────────────────────────────────────────*/
	easeInOutQuad: t => t < 0.5
		? 2 * t * t
		: -1 + (4 - 2 * t) * t,


	/*────────────────────────────────────────────
 	* BOUNCE OUT
 	*
 	* y
 	* 1.0 |        _*_
 	* 0.8 |      *   *
 	* 0.6 |    *     *
 	* 0.4 |  *       *
 	* 0.2 |*         *
 	* 0.0 +----------------------------- x
 	*
 	* Drops quickly, bounces a few times before resting.
 	*────────────────────────────────────────────*/
	bounceOut: t => {
		const n1 = 7.5625
		const d1 = 2.75
		if (t < 1 / d1) {
			return n1 * t * t
		}
		else if (t < 2 / d1) {
			return n1 * (t -= 1.5 / d1) * t + 0.75
		}
		else if (t < 2.5 / d1) {
			return n1 * (t -= 2.25 / d1) * t + 0.9375
		}
		else {
			return n1 * (t -= 2.625 / d1) * t + 0.984375
		}
	},


	/*────────────────────────────────────────────
 	* OVERSHOOT OUT
 	*
 	* y
 	* 1.0 |     *-_
 	* 0.8 |   *   *
 	* 0.6 |  *     *
 	* 0.4 | *       *
 	* 0.2 |          *
 	* 0.0 +----------------------------- x
 	*
 	* Shoots past the target and comes back.
 	*────────────────────────────────────────────*/
	overshootOut: t => {
		const s = 1.70158
		return --t * t * ((s + 1) * t + s) + 1
	},


	/*────────────────────────────────────────────
 	* OVERSHOOT IN
 	*
 	* y
 	* 1.0 |        _-*
 	* 0.8 |      *   *
 	* 0.6 |     *     *
 	* 0.4 |    *       *
 	* 0.2 |   *
 	* 0.0 +----------------------------- x
 	*
 	* Starts by moving opposite direction before accelerating.
 	*────────────────────────────────────────────*/
	overshootIn: t => {
		const s = 1.70158
		return t * t * ((s + 1) * t - s)
	},


	/*────────────────────────────────────────────
 	* BOUNCE
 	*
 	* y
 	* 1.0 |    _*   _*_
 	* 0.8 |   * * *   *
 	* 0.6 |  *   *     *
 	* 0.4 | *     *     *
 	* 0.2 |           *
 	* 0.0 +----------------------------- x
 	*
 	* Multiple bounces with decreasing height.
 	*────────────────────────────────────────────*/
	bounce: t => {
		if (t < 1 / 2.75) {
			return 7.5625 * t * t
		}
		else if (t < 2 / 2.75) {
			return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
		}
		else if (t < 2.5 / 2.75) {
			return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
		}
		else {
			return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375
		}
	}

}


import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{a}from"/static/engine/code_tools/a.js";import{List}from"/static/engine/code_tools/misc/List.js";import{SocketClient}from"/static/engine/socket/SocketClient.js";import{Player}from"/static/game/world/player/Player.js";export class OnlinePlayers{constructor(t){AssertNotNull(t,"argument player in "+this.constructor.name+".js should not be null"),this.player=t,this.connectedPlayers=[],this.socketClient=new SocketClient(8080,e=>{t.clientId=e.clientId,e.on("CONNECT_PLAYER",t=>{const e=new Player("x");e.clientId=t.clientId,this.connectedPlayers.push(e)}),e.on("PLAYER_DISCONNECTED",t=>{List.removeIf(this.connectedPlayers,e=>e.clientId==t.clientId)}),e.on("UPDATE_PLAYER_POSITION",t=>{for(const e of this.connectedPlayers)if(t.clientId==e.clientId){e.x=t.x,e.y=t.y;break}})})}update(){this.socketClient.send({action:"UPDATE_PLAYER_POSITION",x:this.player.x,y:this.player.y})}draw(t,e){for(const s of this.connectedPlayers)s.draw(t,e)}}
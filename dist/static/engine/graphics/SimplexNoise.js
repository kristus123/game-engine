import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";export class SimplexNoise{constructor(t=1){AssertNotNull(t,"argument noiseScale in "+this.constructor.name+".js should not be null"),this.noiseScale=t,this.noiseScale=t,this.perm=[];for(let t=0;t<512;t++)this.perm[t]=Math.floor(256*Math.random());this.perm=this.perm.concat(this.perm)}grad3=[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]];perm=[];noise(t,s=1){const e=t.x*this.noiseScale,i=t.y*this.noiseScale,r=s*this.noiseScale;let o,h,l,m;const n=(e+i+r)*(1/3),a=Math.floor(e+n),p=Math.floor(i+n),c=Math.floor(r+n),d=1/6,u=(a+p+c)*d,g=e-(a-u),N=i-(p-u),S=r-(c-u);let f,M,x,A,j,b;g>=N?N>=S?(f=1,M=0,x=0,A=1,j=1,b=0):g>=S?(f=1,M=0,x=0,A=1,j=0,b=1):(f=0,M=0,x=1,A=1,j=0,b=1):N<S?(f=0,M=0,x=1,A=0,j=1,b=1):g<S?(f=0,M=1,x=0,A=0,j=1,b=1):(f=0,M=1,x=0,A=1,j=1,b=0);const y=g-f+d,k=N-M+d,q=S-x+d,v=g-A+2*d,w=N-j+2*d,z=S-b+2*d,B=g-1+.5,C=N-1+.5,D=S-1+.5,E=255&a,F=255&p,G=255&c,H=this.perm[E+this.perm[F+this.perm[G]]]%12,I=this.perm[E+f+this.perm[F+M+this.perm[G+x]]]%12,J=this.perm[E+A+this.perm[F+j+this.perm[G+b]]]%12,K=this.perm[E+1+this.perm[F+1+this.perm[G+1]]]%12;let L=.6-g*g-N*N-S*S;L<0?o=0:(L*=L,o=L*L*this.dot(this.grad3[H],g,N,S));let O=.6-y*y-k*k-q*q;O<0?h=0:(O*=O,h=O*O*this.dot(this.grad3[I],y,k,q));let P=.6-v*v-w*w-z*z;P<0?l=0:(P*=P,l=P*P*this.dot(this.grad3[J],v,w,z));let Q=.6-B*B-C*C-D*D;return Q<0?m=0:(Q*=Q,m=Q*Q*this.dot(this.grad3[K],B,C,D)),32*(o+h+l+m)}dot(t,s,e,i){return t[0]*s+t[1]*e+t[2]*i}}
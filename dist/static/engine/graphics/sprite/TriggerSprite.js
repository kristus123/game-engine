import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";function dimensionsFrom(t){const i=t.match(/(\d+)x(\d+)/);if(i)return{width:parseInt(i[1],10),height:parseInt(i[2],10)};throw new Error("xx")}export class TriggerSprite{constructor(t,i,s,e=100){AssertNotNull(t,"argument position in "+this.constructor.name+".js should not be null"),AssertNotNull(i,"argument imagePath in "+this.constructor.name+".js should not be null"),AssertNotNull(s,"argument frameSequence in "+this.constructor.name+".js should not be null"),AssertNotNull(e,"argument speed in "+this.constructor.name+".js should not be null"),this.position=t,this.imagePath=i,this.frameSequence=s,this.speed=e,this.image=new Image,this.image.src=i;const n=dimensionsFrom(i);this.width=n.width,this.height=n.height,this.currentFrame=0;const h=s.length;this.finished=!0,setInterval(()=>{this.finished||(this.currentFrame+1!=h?this.currentFrame++:this.currentFrame+1==h&&(this.finished=!0,this.currentFrame=0))},e)}play(t=this.position){this.position=t,this.finished=!1,this.currentFrame=0}get playing(){return!this.finished}draw(t,i){if(this.image.complete){const i=this.frameSequence[this.currentFrame];t.ctx.imageSmoothingEnabled=!1,t.ctx.drawImage(this.image,i.x*this.width,i.y*this.height,this.width,this.height,this.position.x,this.position.y,this.position.width,this.position.height)}}}
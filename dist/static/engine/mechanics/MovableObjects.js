import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{Distance}from"/static/engine/code_tools/misc/Distance.js";import{Mouse}from"/static/engine/controller/Mouse.js";import{Key}from"/static/engine/controller/keyboard/Key.js";import{KeyDown}from"/static/engine/controller/keyboard/KeyDown.js";import{ForcePush}from"/static/engine/core/physics/ForcePush.js";import{Push}from"/static/engine/core/physics/Push.js";export class MovableObjects{constructor(s,t=[]){AssertNotNull(s,"argument movableBy in "+this.constructor.name+".js should not be null"),AssertNotNull(t,"argument objects in "+this.constructor.name+".js should not be null"),this.movableBy=s,this.objects=t,this.e=new Key("e"),this.holding=null,KeyDown("q",()=>{ForcePush(this.holding).towards(Mouse.position,100),this.holding=null})}add(s){this.objects.push(s)}update(){if(this.holding)this.holding.x=this.movableBy.x,this.holding.y=this.movableBy.y;else for(const s of this.objects)Distance.within(100,s,this.movableBy)&&this.e.down&&(this.holding=s)}draw(s,t){if(this.holding)s.text(this.holding.position.offset(0,-50),"Press Q to throw");else for(const t of this.objects)if(Distance.within(100,t,this.movableBy)){s.text(t.position.offset(0,-50),"Press E to pick up");break}}}
import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{Collision}from"/static/engine/core/physics/Collision.js";import{Registry}from"/static/engine/objects/Registry.js";import{StaticGameObject}from"/static/engine/objects/StaticGameObject.js";import{Position}from"/static/engine/position/Position.js";export class InvisibleWall extends StaticGameObject{constructor(i){super(i),AssertNotNull(i,"argument position in "+this.constructor.name+".js should not be null"),this.position=i,1==this.position.width&&(this.position.width=100,this.position.height=100)}update(){for(const i of[Registry.player])if(Collision.between(this,i)){const o={x:i.position.x,y:i.position.y};if(i.position.x=i.previousPosition.x,!Collision.between(this,i))return i.velocity.x=0,void(i.position.x=i.previousPosition.x);if(i.position.x=o.x,i.position.y=i.previousPosition.y,!Collision.between(this,i))return i.velocity.y=0,void(i.position.y=i.previousPosition.y);i.position.y=o.y}}draw(i,o){i.transparentRedRectangle(this.position)}static mapFromJsonObject(i){const o=new this(Position.from(i.position));return o.objectId=i.objectId,o}mapToJson(){return{objectId:this.objectId,position:this.position.toJson()}}}
import{AssertNotNull}from"/static/engine/assertions/AssertNotNull.js";import{Distance}from"/static/engine/code_tools/misc/Distance.js";import{Move}from"/static/engine/core/physics/Move.js";import{Square}from"/static/engine/graphics/Square.js";import{LocalObjects}from"/static/engine/objects/LocalObjects.js";import{Position}from"/static/engine/position/Position.js";export class SimplePathFinder{constructor(t,s,i){AssertNotNull(t,"argument startPosition in "+this.constructor.name+".js should not be null"),AssertNotNull(s,"argument target in "+this.constructor.name+".js should not be null"),AssertNotNull(i,"argument invisibleWalls in "+this.constructor.name+".js should not be null"),this.startPosition=t,this.target=s,this.invisibleWalls=i,this.c1=new Square(t.position.copy(),20),this.c2=new Square(t.position.copy(),20),this.c2.draw=(t,s)=>{t.rectangle(this.c2.position,"orange")},this.localObjects=new LocalObjects([this.c1,this.c2]),this.rotationAmount=0,this.speed=10,this.angle1=this.c1.position.copy(),this.c1Active=!0,this.success=!1,this.touchedC1=!1}update(){this.localObjects.update();let t=new Position(9e3,9e3,100,100);if(this.c1Active){Move(this.c1).to(this.target,this.rotationAmount,this.speed);for(const s of this.invisibleWalls)Distance.between(this.c1,s)<Distance.between(this.c1,t)&&(t=s),this.c1.touches(s)&&(this.c1.position=this.startPosition.position.copy(),this.rotationAmount+=100);Distance.between(this.c1,t)>300&&Move(this.c1).to(this.target,0,this.speed),this.c1Active=!1}else{Move(this.c2).to(this.target,0,this.speed);let t=!1;for(const s of this.invisibleWalls)if(this.c2.touches(s)){t=!0;break}t&&(this.c2.position=this.c1.position.copy(),this.c1Active=!0),this.c2.within(100,this.target)&&(this.success=!0)}}draw(t,s){}}
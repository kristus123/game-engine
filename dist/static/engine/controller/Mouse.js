import{StopWatch}from"/static/engine/code_tools/StopWatch.js";import{a}from"/static/engine/code_tools/a.js";import{Call}from"/static/engine/code_tools/tools/Call.js";import{ClickEvents}from"/static/engine/controller/mouse/ClickEvents.js";import{Camera}from"/static/engine/core/camera/Camera.js";import{Collision}from"/static/engine/core/physics/Collision.js";import{Move}from"/static/engine/core/physics/Move.js";import{Position}from"/static/engine/position/Position.js";export class Mouse{static position=new Position(0,0);static screenPosition=new Position(0,0);static initialize(){this.disabled=!1,this.up=!0,this.down=!1,this.downStopWatch=new StopWatch,this.onClick=()=>{},this.onRightClick=()=>{},this.rightUp=!0,this.rightDown=!1,this.moving=!1,this.lastPositionBeforeMoving=new Position(0,0),this.timeSinceLastClick=0,document.addEventListener("wheel",t=>{Math.sign(t.deltaY)>0?(console.log("Scrolling out (down)"),Call(this.scrollOut)):(console.log("Scrolling in (up)"),Call(this.scrollIn))}),document.addEventListener("mousedown",t=>{this.disabled||(0==t.button?(this.down=!0,this.up=!1,this.downStopWatch.start()):2==t.button&&(this.rightDown=!0,this.rightUp=!1))}),document.addEventListener("mouseup",t=>{0==t.button?(this.up=!0,this.down=!1,this.downStopWatch.stop(),this.downStopWatch.reset()):2==t.button&&(this.rightUp=!0,this.rightDown=!1)}),document.addEventListener("click",t=>{this.disabled||(console.log(t.button),0==t.button&&this.onClick(this.position))}),document.addEventListener("contextmenu",t=>{t.preventDefault(),this.disabled||(this.onRightClick(this.screenPosition),console.log("user right lcicked"))}),this.clickEvents=new ClickEvents,this.holding=null,this.hoveringHtmlElement=!1}static downForLongerThan(t){return this.down&&this.downStopWatch.elapsedTime>t}static addOnClick(t,i){this.clickEvents.addOnClick(t,i)}static removeOnClick(t,i){this.clickEvents.removeOnClick(t,i)}static initializeAfterCameraIsInitialized(){document.addEventListener("mousemove",t=>{Mouse.positionRelativeToCamera(t.clientX,t.clientY),this.moving=!0,this.lastPositionBeforeMoving.x=this.position.x,this.lastPositionBeforeMoving.y=this.position.y,setTimeout(()=>{this.moving=!1},2)}),document.addEventListener("touchmove",function(t){if(t.touches.length>0){const i=t.touches[0];Mouse.positionRelativeToCamera(i.clientX,i.clientY),setTimeout(()=>{this.moving=!1},2)}}),document.addEventListener("touchstart",t=>{const i=t.changedTouches[0];Mouse.positionRelativeToCamera(i.clientX,i.clientY),setTimeout(()=>{this.moving=!1},2)})}static positionRelativeToCamera(t,i){this.screenPosition.x=t,this.screenPosition.y=i;const o=1/Camera.zoom,s=(t-Camera.offset.x)*o+Camera.position.x,e=(i-Camera.offset.y)*o+Camera.position.y;return this.position.x=s,this.position.y=e,this.position.copy()}static clicked(t){return Collision.between(this.position,t)&&this.down}static click(t,i=20){return!!(this.timeSinceLastClick>i&&Mouse.down)&&(this.timeSinceLastClick=0,this.clicked(t))}static hovering(t){return t instanceof HTMLElement?t.contains(document.querySelector(":hover")):Collision.between(this.position,t)}static update(){this.timeSinceLastClick+=1}static holdAndMove(t){this.holding&&this.down?(this.holding.x=this.position.x,this.holding.y=this.position.y):this.up?this.holding=null:this.clicked(t)&&(this.holding=t)}static draw(t,i){t.circle(this.position)}}
import{a}from"/static/engine/code_tools/a.js";import{Distance}from"/static/engine/code_tools/misc/Distance.js";import{List}from"/static/engine/code_tools/misc/List.js";import{Mouse}from"/static/engine/controller/Mouse.js";import{Collision}from"/static/engine/core/physics/Collision.js";import{Button}from"/static/engine/graphics/ui/Button.js";import{Overlay}from"/static/engine/graphics/ui/Overlay.js";import{Position}from"/static/engine/position/Position.js";export class MouseEditor{static active=null;constructor(){this.activeObject=null,this.objects=[],this.onClick=t=>{},Mouse.addOnClick("add object to world",t=>{MouseEditor.active==this&&(this.recentlyEditedObject?console.log("ignore"):this.onClick(t))}),this.firstClickedArea=null,this.markedArea=null,this.markedObjects=[]}add(t){this.objects.push(t)}update(){if(this.lastClicked&&Mouse.rightDown)this.lastClicked.position.width=Mouse.position.x-this.lastClicked.position.x,this.lastClicked.position.height=Mouse.position.y-this.lastClicked.position.y,this.moved(this.lastClicked);else if(this.activeObject||!Mouse.downForLongerThan(100)||this.firstClickedArea){if(!this.activeObject&&Mouse.down&&this.firstClickedArea)this.markedArea=new Position(this.firstClickedArea.x,this.firstClickedArea.y,Mouse.position.x-this.firstClickedArea.x,Mouse.position.y-this.firstClickedArea.y),this.recentlyEditedObject=!0;else if(this.firstClickedArea&&Mouse.up)this.firstClickedArea=null,this.recentlyEditedObject=!0,setTimeout(()=>{this.recentlyEditedObject=!1},200);else if(this.activeObject&&Mouse.up)console.log("moved"),this.moved(this.activeObject),this.lastClicked=this.activeObject,this.activeObject=null,this.recentlyEditedObject=!0,setTimeout(()=>{this.recentlyEditedObject=!1},500);else if(this.activeObject&&Mouse.clicked(this.activeObject.position.topLeft))this.remove(this.activeObject),List.remove(this.objects,this.activeObject),this.activeObject=null,this.lastClicked=null,this.recentlyEditedObject=!0;else if(this.activeObject&&Mouse.down)this.activeObject.position.center.x=Mouse.position.x,this.activeObject.position.center.y=Mouse.position.y,this.recentlyEditedObject=!0,this.markedArea=null,this.markedObjects=[],Overlay.clearBottom();else if(this.activeObject&&Distance.between(Mouse.position,this.activeObject)>100)this.lastClicked=this.activeObject,this.activeObject=null;else for(const t of this.objects)if(Mouse.clicked(t)){this.activeObject=t,this.lastClicked=null;break}}else this.firstClickedArea=Mouse.position.copy()}draw(t,e){if(this.firstClickedArea&&this.markedArea){t.transparentGreenRectangle(this.markedArea);for(const t of this.objects)Collision.between(t,this.markedArea)&&(List.empty(this.markedObjects)&&Overlay.bottomButton("delete",()=>{for(const t of this.markedObjects)this.remove(t),List.remove(this.objects,t);this.markedObjects=[],Overlay.clearBottom()}),List.includes(this.markedObjects,t)||this.markedObjects.push(t))}for(const e of this.markedObjects)t.text(e.position.offset(0,-100),"marked");if(this.lastClicked&&!this.activeObject&&(t.transparentGreenRectangle(this.lastClicked),t.rectangle(this.lastClicked.position.topLeft,"red"),t.rectangle(this.lastClicked.position.bottomRight),Mouse.hovering(this.lastClicked.position.topLeft)?t.text(this.lastClicked.position.offset(-150,10),"delete"):Mouse.hovering(this.lastClicked.position.bottomRight)&&t.text(this.lastClicked.position.offset(-150,10),"resize")),this.activeObject)for(const e of this.objects)if(Mouse.hovering(e)&&Mouse.up){t.text(e.position.offset(10,10),"click to move");break}}}